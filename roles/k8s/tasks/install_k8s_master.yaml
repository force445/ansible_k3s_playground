# ---
# - name: Install kubectl with binary
#   ansible.builtin.shell: |
#     curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

# - name: Download kubectl SHA256 checksum
#   ansible.builtin.shell: |
#     curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"

# - name: Validate kubectl binary checksum
#   ansible.builtin.shell: |
#     echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check

# - name: Install kubectl binary
#   ansible.builtin.shell: |
#     sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
#     kubectl version --client

# - name: Ensure util-linux is installed (for swapon)
#   apt:
#     name: util-linux
#     state: present

# - name: Check if swap is enabled
#   command: swapon --summary
#   register: swap_status
#   changed_when: false
#   failed_when: false

# - name: Disable swap temporarily
#   command: swapoff -a
#   when: swap_status.get("stdout", "") != ""
#   become: true
#   ignore_errors: true

# - name: Install k8s v1.33 and dependencies
#   ansible.builtin.shell: |
#     sudo apt-get update && \
#     sudo apt-get install -y apt-transport-https ca-certificates curl gpg && \
#     curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg && \
#     echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list && \
#     sudo apt-get update && \
#     sudo apt-get install -y kubelet kubeadm kubectl && \
#     sudo apt-mark hold kubelet kubeadm kubectl

# - include_tasks: init_k8s_main_master.yaml
#   when: inventory_hostname == groups['server'][0]

# Test
---
- name: Disable swap
  shell: swapoff -a
  ignore_errors: true

- name: Remove swap from fstab
  replace:
    path: /etc/fstab
    regexp: '^.* swap .*$'
    replace: ''
  ignore_errors: true

- name: Install dependencies
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
    state: present
    update_cache: true

- name: Add Kubernetes GPG key
  shell: |
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | \
    gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Add Kubernetes apt repo
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /"
    filename: kubernetes
    state: present

- name: Create default containerd config file
  shell: |
    mkdir -p /etc/containerd
    containerd config default | tee /etc/containerd/config.toml
  args:
    creates: /etc/containerd/config.toml

- name: Enable SystemdCgroup in containerd config
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'

- name: Install cri-tools (crictl)
  apt:
    name: cri-tools
    state: present
    update_cache: true

- name: Create crictl config to use correct containerd socket
  copy:
    dest: /etc/crictl.yaml
    content: |
      runtime-endpoint: unix:///var/run/containerd/containerd.sock
      image-endpoint: unix:///var/run/containerd/containerd.sock

- name: Test CRI with crictl
  shell: crictl info
  register: cri_result
  failed_when: "'RuntimeType' not in cri_result.stdout"

- name: Install runc and crictl
  apt:
    name:
      - runc
      - cri-tools
    state: present
    update_cache: true

- name: Restart containerd
  systemd:
    name: containerd
    state: restarted
    enabled: true

- name: Install Kubernetes packages
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: true

- name: Hold Kubernetes packages
  shell: apt-mark hold kubelet kubeadm kubectl

- name: Initialize Kubernetes (single node)
  shell: |
    kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address={{ ansible_host }}
  args:
    creates: /etc/kubernetes/admin.conf

- name: Setup kubeconfig for root
  shell: |
    mkdir -p /root/.kube
    cp -i /etc/kubernetes/admin.conf /root/.kube/config

- name: Install Calico CNI
  shell: |
    kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Allow master to schedule pods (taint removal)
  shell: |
    kubectl taint nodes --all node-role.kubernetes.io/control-plane- || true
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
